  typedef enum logic [3:0] {IDLE, WAIT, CMD_INIT, RESP} state_t;

  state_t state, state_n, state_p;

  always_comb
  begin
    case (state)
      IDLE : 
        if (go)
          state_n = CMD_INIT;
      WAIT : 
        begin
          cmd_valid = 1'b0;
          case (state_p)
            CMD_INIT  : state_n = RESP;
          endcase
        end
      CMD_INIT : 
        begin
          if (cmd_ready)
          begin
            cmd_valid = 1'b1;
            cmd_bits_inst_opcode = 7'b111_1111;
            cmd_bits_inst_funct  = 7'b000_0000;
            cmd_bits_rs1	       = src_addr;
            cmd_bits_rs2	       = dst_addr;
            state_n 	           = WAIT;
          end
        end	
      RESP : 
        begin
          resp_ready = 1'b1;
          if (resp_valid)
          begin
            state_n = IDLE;
          end
        end	
      default :
        begin
          cmd_bits_inst_opcode  = 7'b000_0000;
          cmd_bits_inst_rd 	    = 5'b0_0000;
          cmd_bits_inst_xs2 	  = 1'b0;
          cmd_bits_inst_xs1 	  = 1'b0;
          cmd_bits_inst_xd 	    = 1'b0;
          cmd_bits_inst_rs1 	  = 5'b0_0000;
          cmd_bits_inst_rs2 	  = 5'b0_0000;
          cmd_bits_inst_funct   = 7'b000_0000;
          state_n 	            = IDLE;
          cmd_valid 	          = 1'b0;
          resp_ready 	          = 1'b0;
        end
    endcase
  end

  always @(posedge clk)
  begin
    if (~reset)
    begin
      state   <= IDLE;
      state_p <= IDLE;
    end
    else
    begin
      state   <= state_n;
      state_p <= state;
    end
  end	
